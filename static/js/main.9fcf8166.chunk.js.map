{"version":3,"sources":["store.ts","util/util.ts","components/icons/icon.tsx","components/SelectedEvent.tsx","components/calendar/useDisplayDates.ts","components/calendar/DisplayEventView.tsx","components/calendar/DisplayDateView.tsx","components/calendar/Calendar.tsx","components/calendar/useMonthAndYear.ts","components/CalendarPage.tsx","data/students.ts","components/DutiesPage.tsx","components/ReviewRow.tsx","components/ReviewPage.tsx","components/TasksPage.tsx","components/Content.tsx","util/navigation-store.ts","components/Header.tsx","globals.ts","sw-logic.tsx","util/load-calendar-events.ts","index.tsx","App.tsx","util/load-reviews.ts"],"names":["NavigationState","createStore","navigation","TASKS","events","reviewsData","version","reviews","since","selectedEvent","useSub","Store","Util","classes","filter","clazz","Boolean","join","_Icon","symbol","props","width","className","viewBox","fill","d","Icons","IconCalendarDay","IconChevronRight","IconChevronLeft","IconTimes","IconUndo","WEEKDAY_NAMES","_withLeadingZero","num","slice","formatDate","date","getDay","getDate","getMonth","getFullYear","hours","getUTCHours","minutes","getMinutes","formatTime","clearSelectedEvent","set","SelectedEvent","title","start","end","desc","onClick","_getDisplayEvent","event","isStart","isEnd","row","eventClass","titleSpace","Math","min","ceil","_eventClass","showTitle","undefined","zIndex","select","backgroundColor","color","useDisplayDates","year","month","useMemo","dates","result","map","Array","possibleStartIdx","findIndex","possibleEndIdx","endIdx","length","startIdx","eventsForDate","e","i","calculateEvents","offsetLeft","Date","_","index","next","push","offsetRight","concat","calculateDates","DisplayEventView","style","DisplayDateView","now","key","MONTH_NAMES","_NOW","NOW","Calendar","useState","monthAndYear","setMonthAndYear","useCallback","useMonthAndYear","prevMonth","nextMonth","weekday","CalendarPage","Students","split","mondaysCount","floor","UTC","timestamp","Duties","DutyImages","DutiesAndStudents","duty","studentIndex","pos","base","imageName","image","alt","students","Duty","src","student","DutiesPage","ReviewRow","review","name","crowns","warnings","evils","necessary","rewards","ReviewPage","role","aria-label","TasksPage","href","Content","DUTIES","REVIEW","CALENDAR","current","Persistore","get","_get","NavigationStore","_set","NavigationButtons","type","label","Header","buttons","button","btn","Globals","window","document","navigator","onLine","reloadPage","open","location","newSWInstalledCb","registerServiceWorker","serviceWorker","register","then","reg","onupdatefound","installingWorker","installing","activeWorker","active","onstatechange","state","catch","console","error","doAfter","ms","cb","Promise","resolve","setTimeout","parseDate","value","matchWithTime","match","matchWithoutTime","usedMatch","Number","day","hour","minute","parsed","parseEvent","startDate","endDate","root","getElementById","ReactDOM","render","content","setContent","contentDelayed","delay","initRefresh","all","useEffect","addEventListener","fetch","headers","pragma","r","json","parsedEvents","parsedVersion","parsedSince"],"mappings":"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","file":"static/js/main.9fcf8166.chunk.js","sourcesContent":["import { createStore } from 'react-use-sub';\n\nexport type CalendarEvent = {\n    title: string;\n    start: Date;\n    end: Date;\n    desc?: string;\n    color?: string;\n};\n\nexport type Review = {\n    name: string;\n    crowns: number;\n    warnings: number;\n    evils: number;\n    necessary?: number;\n    rewards?: number;\n};\nexport type ReviewsData = {\n    reviews: ReadonlyArray<Review>;\n    version: string;\n    since: string;\n};\n\nexport enum NavigationState {\n    TASKS = 'tasks',\n    CALENDAR = 'calendar',\n    DUTIES = 'duties',\n    REVIEW = 'review',\n}\n\ntype State = {\n    navigation: NavigationState;\n    events: CalendarEvent[];\n    reviewsData: ReviewsData;\n    selectedEvent: CalendarEvent | null;\n};\n\nconst [useSub, Store] = createStore<State>({\n    navigation: NavigationState.TASKS,\n    events: [],\n    reviewsData: { version: '', reviews: [], since: '' },\n    selectedEvent: null,\n});\n\nexport { useSub, Store };\n","const classNames = (...classes: any[]): string => classes.filter((clazz?: string) => Boolean(clazz)).join(' ');\n\nconst array = (num: number): Array<void> => [...Array(num)];\n\nconst nextArray = <T>(before: T[], index: number, value: T): T[] => [\n    ...before.slice(0, index),\n    value,\n    ...before.slice(index + 1),\n];\n\nexport const Util = { array, classNames, nextArray };\n","import React from 'react';\nimport Icons from './icon-path.json';\nimport { Util } from '../../util/util';\n\ntype IconProps = { className?: string };\n\nconst _Icon = (symbol: keyof typeof Icons, props: IconProps = {}, width: number = 512) => (\n    <svg className={props.className ? props.className + ' icon' : 'icon'} viewBox={`0 0 ${width} 512`}>\n        <path fill=\"currentColor\" d={Icons[symbol]} />\n    </svg>\n);\n\nexport const IconCalendarDay: React.FC<IconProps> = (props: IconProps) => _Icon('CALENDAR_DAY', props, 448);\nexport const IconChevronRight: React.FC<IconProps> = (props: IconProps) => _Icon('CHEVRON_RIGHT', props, 320);\nexport const IconChevronLeft: React.FC<IconProps> = (props: IconProps) =>\n    _Icon('CHEVRON_RIGHT', { ...props, className: Util.classNames('reflect', props.className) }, 320);\nexport const IconTimes: React.FC<IconProps> = (props: IconProps) => _Icon('TIMES', props, 352);\nexport const IconUndo: React.FC<IconProps> = (props: IconProps) => _Icon('UNDO', props);\n","import React from 'react';\nimport { CalendarEvent, Store } from '../store';\nimport { IconCalendarDay, IconTimes } from './icons/icon';\n\nconst WEEKDAY_NAMES = ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'];\n\nconst _withLeadingZero = (num: number) => ('0' + num).slice(-2);\n\nconst formatTime = (date: Date): string => {\n    const hours = date.getUTCHours();\n    const minutes = date.getMinutes();\n    return hours || minutes ? ` um ${hours}:${_withLeadingZero(minutes)} Uhr` : '';\n};\nconst formatDate = (date: Date) =>\n    `${WEEKDAY_NAMES[date.getDay()]}, ${_withLeadingZero(date.getDate())}.${_withLeadingZero(\n        date.getMonth() + 1\n    )}.${date.getFullYear()}${formatTime(date)}`;\n\nconst clearSelectedEvent = () => Store.set({ selectedEvent: null });\n\nexport type SelectedEventProps = { selectedEvent: CalendarEvent };\n\nexport const SelectedEvent = ({ selectedEvent }: SelectedEventProps) => {\n    const { title, start, end, desc } = selectedEvent;\n\n    return (\n        <div className=\"selected-event\" onClick={clearSelectedEvent}>\n            <div className=\"close-btn\">\n                <IconTimes />\n            </div>\n            <div className=\"selected-event-container\">\n                <div className=\"description\">\n                    <span className=\"title\">{title}</span>\n                    <hr />\n                    {+start === +end ? (\n                        <>\n                            <IconCalendarDay /> {formatDate(start)}\n                        </>\n                    ) : (\n                        <>\n                            <div className=\"date-label\">Beginn:</div>\n                            {formatDate(start)}\n                            <hr />\n                            <div className=\"date-label\">Ende:</div>\n                            {formatDate(end)}\n                        </>\n                    )}\n                    {desc && <hr />}\n                    {desc}\n                </div>\n            </div>\n        </div>\n    );\n};\n","import { useMemo } from 'react';\nimport { CalendarEvent, Store } from '../../store';\n\nconst selectEvent = (selectedEvent: CalendarEvent) => Store.set({ selectedEvent });\n\nconst ONE_DAY = 86400000; // 24 * 60 * 60 * 1000\n\nconst calculateDates = (year: number, month: number): Date[] => {\n    const firstOfMonth = new Date(year, month, 1);\n    const offsetLeft = (firstOfMonth.getDay() + 6) % 7;\n    const result = new Array(offsetLeft)\n        .fill(undefined)\n        .map((_, index) => new Date(year, month, index - offsetLeft + 1));\n\n    for (let i = 1; i <= 31; i++) {\n        const next = new Date(year, month, i);\n        if (next.getMonth() === month) {\n            result.push(next);\n        } else {\n            break;\n        }\n    }\n\n    const offsetRight = 7 - result[result.length - 1].getDay();\n    return result.concat(\n        new Array(offsetRight).fill(undefined).map((_, index) => new Date(year, month + 1, index + 1))\n    );\n};\n\ntype EventClass = 'single' | 'begin' | 'middle' | 'end';\n\nconst _eventClass = (isStart: boolean, isEnd: boolean): EventClass => {\n    if (isStart) return isEnd ? 'single' : 'begin';\n    else return isEnd ? 'end' : 'middle';\n};\n\nconst _eventMargin = (eventClass: EventClass): number => {\n    if (eventClass === 'single') return 1;\n    else if (eventClass === 'middle') return 0.5;\n    else return 0.75;\n};\n\nexport type DisplayEvent = {\n    title?: string;\n    backgroundColor?: string;\n    zIndex?: number;\n    width: string;\n    select: () => void;\n    className: string;\n    row: number;\n};\nconst _getDisplayEvent = (\n    event: CalendarEvent,\n    date: Date,\n    isStart: boolean,\n    isEnd: boolean,\n    row: number\n): DisplayEvent => {\n    const titleSpace = Math.min(Math.ceil((+event.end - +date) / ONE_DAY), ((7 - date.getDay()) % 7) + 1);\n    const className = _eventClass(isStart, isEnd);\n    const width = `calc(${titleSpace * 100}% - ${_eventMargin(className)}em - ${titleSpace > 1 ? 0.5 : 0}em)`;\n    const showTitle = isStart || date.getDay() === 1;\n    const title = showTitle ? event.title : undefined;\n    const zIndex = showTitle ? 1 : undefined;\n    return { title, zIndex, select: () => selectEvent(event), width, className, row, backgroundColor: event.color };\n};\n\nexport type DisplayDate = { date: Date; events: DisplayEvent[] };\nconst calculateEvents = (dates: Date[], events: CalendarEvent[]): DisplayDate[] => {\n    const result: DisplayDate[] = dates.map(date => ({ date, events: new Array(3).fill(undefined) }));\n    for (const event of events) {\n        const { start, end } = event;\n        const possibleStartIdx = dates.findIndex(date => +start < +date + ONE_DAY && start > date);\n        const possibleEndIdx = dates.findIndex(date => +end < +date + ONE_DAY && end > date);\n\n        const endIdx = possibleEndIdx < 0 && end > dates[dates.length - 1] ? dates.length - 1 : possibleEndIdx;\n        const startIdx = possibleStartIdx < 0 && start < dates[0] ? 0 : possibleStartIdx;\n\n        if (startIdx >= 0 && endIdx >= 0) {\n            const eventsForDate = result[startIdx].events;\n            const row = eventsForDate.findIndex(e => e === undefined);\n            if (row >= 0) {\n                eventsForDate[row] = _getDisplayEvent(\n                    event,\n                    dates[startIdx],\n                    startIdx === possibleStartIdx,\n                    startIdx === possibleEndIdx,\n                    row\n                );\n                for (let i = startIdx + 1; i <= endIdx; i++) {\n                    result[i].events[row] = _getDisplayEvent(event, dates[i], false, i === possibleEndIdx, row);\n                }\n            }\n        }\n    }\n    return result;\n};\n\nexport const useDisplayDates = (year: number, month: number, events: CalendarEvent[]) =>\n    useMemo(() => calculateEvents(calculateDates(year, month), events), [year, month, events]);\n","import React from 'react';\nimport { DisplayEvent } from './useDisplayDates';\nimport { Util } from '../../util/util';\n\nexport type DisplayEventViewProps = { event: DisplayEvent };\n\nexport const DisplayEventView: React.FC<DisplayEventViewProps> = ({ event }) => {\n    if (!event) return null;\n    const { title, zIndex, width, className, row, select, backgroundColor } = event;\n    return (\n        <div\n            onClick={select}\n            style={{ width, zIndex, backgroundColor }}\n            className={Util.classNames('event', 'event-' + row, className)}>\n            {title || <>&nbsp;</>}\n        </div>\n    );\n};\n","import React from 'react';\nimport { DisplayDate } from './useDisplayDates';\nimport { Util } from '../../util/util';\nimport { DisplayEventView } from './DisplayEventView';\n\nexport type DisplayDateViewProps = { date: DisplayDate; month: number; now: Date };\n\nexport const DisplayDateView: React.FC<DisplayDateViewProps> = ({ date: { date, events }, month, now }) => (\n    <div\n        className={Util.classNames(\n            'date',\n            date.getMonth() !== month && 'inactive',\n            +date === +now && 'current',\n            date.getDay() === 1 && 'monday'\n        )}>\n        <span className=\"value\">{date.getDate()}</span>\n        {events.map((event, index: number) => (\n            <DisplayEventView event={event} key={index} />\n        ))}\n    </div>\n);\n","import React from 'react';\nimport { IconChevronLeft, IconChevronRight } from '../icons/icon';\nimport { CalendarEvent } from '../../store';\nimport { useMonthAndYear } from './useMonthAndYear';\nimport { useDisplayDates } from './useDisplayDates';\nimport { DisplayDateView } from './DisplayDateView';\n\nconst MONTH_NAMES = [\n    'Januar',\n    'Februar',\n    'März',\n    'April',\n    'Mai',\n    'Juni',\n    'Juli',\n    'August',\n    'September',\n    'Oktober',\n    'November',\n    'Dezember',\n];\nconst WEEKDAY_NAMES = ['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'];\n\nconst _NOW = new Date();\nconst NOW = new Date(_NOW.getFullYear(), _NOW.getMonth(), _NOW.getDate());\n\nexport const Calendar: React.FC<{ events: CalendarEvent[] }> = ({ events }) => {\n    const [{ month, year }, prevMonth, nextMonth] = useMonthAndYear(NOW);\n    const dates = useDisplayDates(year, month, events);\n\n    return (\n        <div className=\"calendar\">\n            <div className=\"month\">\n                <span onClick={prevMonth} className=\"arrow\">\n                    <IconChevronLeft />\n                </span>\n                <span className=\"value\">\n                    {MONTH_NAMES[month]} {year}\n                </span>\n                <span onClick={nextMonth} className=\"arrow\">\n                    <IconChevronRight />\n                </span>\n            </div>\n            <div className=\"grid\">\n                {WEEKDAY_NAMES.map(weekday => (\n                    <div key={weekday} className=\"weekday\">\n                        {weekday}\n                    </div>\n                ))}\n                {dates.map(date => (\n                    <DisplayDateView date={date} month={month} now={NOW} key={+date.date} />\n                ))}\n            </div>\n        </div>\n    );\n};\n","import { useCallback, useState } from 'react';\n\nexport type MonthAndYear = { month: number; year: number };\n\nexport const useMonthAndYear = (now: Date): [MonthAndYear, () => void, () => void] => {\n    const [monthAndYear, setMonthAndYear] = useState<MonthAndYear>(() => ({\n        month: now.getMonth(),\n        year: now.getFullYear(),\n    }));\n\n    const prevMonth = useCallback(\n        () =>\n            setMonthAndYear(({ month, year }) => ({\n                month: month === 0 ? 11 : month - 1,\n                year: month === 0 ? year - 1 : year,\n            })),\n        []\n    );\n    const nextMonth = useCallback(\n        () =>\n            setMonthAndYear(({ month, year }) => ({\n                month: month === 11 ? 0 : month + 1,\n                year: month === 11 ? year + 1 : year,\n            })),\n        []\n    );\n\n    return [monthAndYear, prevMonth, nextMonth];\n};\n","import React from 'react';\nimport { useSub } from '../store';\nimport { SelectedEvent } from './SelectedEvent';\nimport { Calendar } from './calendar/Calendar';\n\nexport const CalendarPage = () => {\n    const { selectedEvent, events } = useSub(({ selectedEvent, events }) => ({ selectedEvent, events }));\n    return (\n        <div className=\"calendar-page\">\n            <h1>Termine</h1>\n            <Calendar events={events} />\n            {selectedEvent && <SelectedEvent selectedEvent={selectedEvent} />}\n        </div>\n    );\n};\n","export const Students = 'Emily,Yoan,Hadia,Wiam,Rehab,Aurel,Jaimie,Mohammad II,Anna,Beyza,Ivan,Kenai,Yusuf,Sabit,Mohammad,Majd,Myron,Irene,Yassin,Hossein,Deswill,Lennart,Jaden,Lisa'.split(\n    ','\n);\n","import React from 'react';\nimport { Students } from '../data/students';\n\nconst NOW = Date.now();\nconst COUNT_FIX = 16;\n\n// 1000 * 60 * 60 * 24 = 86400000 (milliseconds of a day)\nconst countOfAllMondays = Math.floor(((NOW - Date.UTC(2019, 0, 1)) / 86400000 + 1) / 7);\n\nconst mondaysToIgnore = [\n    Date.UTC(2019, 9, 7),\n    Date.UTC(2019, 9, 14),\n    Date.UTC(2019, 11, 23),\n    Date.UTC(2019, 11, 30),\n    Date.UTC(2020, 2, 2),\n    Date.UTC(2020, 2, 9),\n    Date.UTC(2020, 4, 18),\n];\n\nconst countOfIgnoredInPast = mondaysToIgnore.filter(timestamp => timestamp <= NOW).length;\n\nconst mondaysCount = countOfAllMondays - countOfIgnoredInPast;\n\nconst Duties = 'Blumen gießen,Tafel wischen,Zettel austeilen,Müll wegbringen,Licht ausschalten,Fenster schließen,Fegen,Reserve'.split(\n    ','\n);\nconst DutyImages = 'plant,board,share,trash,light,window,sweep,reserve'.split(',');\ntype DutyProps = { duty: string; image: string; alt: string; students: string[] };\n\nconst modulo = (num: number, base: number) => ((num % base) + base) % base;\n\nconst DutiesAndStudents = Duties.map<DutyProps>((duty, index) => {\n    const studentIndex = (pos: number) => modulo(-2 * mondaysCount + 2 * index + COUNT_FIX + pos, Students.length);\n    const imageName = DutyImages[index];\n    return {\n        duty,\n        image: `/${imageName}.jpg`,\n        alt: duty,\n        students: [Students[studentIndex(0)], Students[studentIndex(1)]],\n    };\n});\n\nconst Duty = ({ duty, image, alt, students }: DutyProps) => (\n    <div className=\"duty\">\n        <div className=\"duty-title\">{duty}</div>\n        <div className=\"duty-image\">\n            <img src={image} alt={alt} />\n        </div>\n        {students.map((student, index) => (\n            <div className=\"student\" key={index}>\n                {student}\n            </div>\n        ))}\n        <hr />\n    </div>\n);\n\nexport const DutiesPage = () => (\n    <div className=\"duties\">\n        {DutiesAndStudents.map((duty, index) => (\n            <Duty key={index} {...duty} />\n        ))}\n    </div>\n);\n","import React from 'react';\nimport { Review } from '../store';\n\nexport type ReviewRowProps = { review: Review };\n\nexport const ReviewRow = ({ review: { name, crowns, warnings, evils, necessary, rewards } }: ReviewRowProps) => (\n    <tr className={necessary ? 'evil' : undefined}>\n        <td>{name}</td>\n        <td>\n            {crowns}\n            {rewards ? <span className=\"rewards\">{rewards}</span> : null}\n        </td>\n        <td>{warnings}</td>\n        <td>{evils}</td>\n        <td>{necessary || ''}</td>\n    </tr>\n);\n","import React from 'react';\nimport { useSub } from '../store';\nimport { ReviewRow } from './ReviewRow';\n\nexport const ReviewPage = () => {\n    const {\n        reviewsData: { version, reviews, since },\n    } = useSub(({ reviewsData }) => ({ reviewsData }));\n    return (\n        <div className=\"reviews\">\n            <h1>Kronenliste</h1>\n            <table className=\"pure-table\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>\n                            <span role=\"img\" aria-label=\"Kronen\">\n                                👑\n                            </span>\n                        </th>\n                        <th>\n                            <span role=\"img\" aria-label=\"Gelbe Karten\">\n                                😩\n                            </span>\n                        </th>\n                        <th>\n                            <span role=\"img\" aria-label=\"Rote Karte\">\n                                😡\n                            </span>\n                        </th>\n                        <th>\n                            <span role=\"img\" aria-label=\"Fehlende Kronen\">\n                                🚫\n                            </span>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {reviews.map(review => (\n                        <ReviewRow key={review.name} review={review} />\n                    ))}\n                </tbody>\n            </table>\n            Die Liste wird geführt seit: {since}\n            <br />\n            Aktualisiert am: {version}\n            <ul>\n                <li>\n                    <span role=\"img\" aria-label=\"Kronen\">\n                        👑\n                    </span>{' '}\n                    - Anzahl der Kronen\n                </li>\n                <li>\n                    <span role=\"img\" aria-label=\"Gelbe Karten\">\n                        😩\n                    </span>{' '}\n                    - Anzahl der gelben Karten\n                </li>\n                <li>\n                    <span role=\"img\" aria-label=\"Rote Karte\">\n                        😡\n                    </span>{' '}\n                    - Anzahl der roten Karten\n                </li>\n                <li>\n                    <span role=\"img\" aria-label=\"Fehlende Kronen\">\n                        🚫\n                    </span>{' '}\n                    - Anzahl der noch fehlenden Kronen\n                </li>\n            </ul>\n        </div>\n    );\n};\n","import React from 'react';\n\nexport const TasksPage: React.FC = () => (\n    <div className=\"tasks-page\">\n        <h1>Aufgaben</h1>\n        <p>\n            Bitte entnehmt dem{' '}\n            <a href=\"https://github.com/nbraack/nbraack.github.io/raw/master/Aufgaben/Wochenplan.pdf\">Wochenplan</a>,\n            welche Aufgaben ihr in den kommenden Tagen bearbeiten müsst.\n            <br />\n            <br />\n            Weiter unten findet ihr die Arbeitsblätter, die ihr zur Bearbeitung der Aufgaben benötigt.\n        </p>\n        <h1>Materialien</h1>\n        <h2>Mathe</h2>\n        <ul>\n            <li>\n                <a href=\"https://github.com/nbraack/nbraack.github.io/raw/master/Aufgaben/Mathe/Klasse%207%20Mathematik%20Checkliste%20plus%20ABs%20und%20L%C3%B6sungen.pdf\">\n                    Checkliste\n                </a>\n            </li>\n            <li>\n                <a href=\"https://github.com/nbraack/nbraack.github.io/raw/master/Aufgaben/Mathe/Mathebuchseiten%20f%C3%BCr%20die%20Checkliste.pdf\">\n                    Mathebuch\n                </a>\n            </li>\n        </ul>\n        <h2>Bio</h2>\n        <ul>\n            <li>\n                <a href=\"https://github.com/nbraack/nbraack.github.io/raw/master/Aufgaben/Bio/Ern%C3%A4hrungs-Mappe.pdf\">\n                    Ernährungs-Mappe\n                </a>\n            </li>\n            <li>\n                <a href=\"https://github.com/nbraack/nbraack.github.io/raw/master/Aufgaben/Bio/Arbeitsbl%C3%A4tter%20Ern%C3%A4hrungs-Mappe.pdf\">\n                    Arbeitsblätter Ernährungs-Mappe\n                </a>\n            </li>\n            <li>\n                <a href=\"https://github.com/nbraack/nbraack.github.io/raw/master/Aufgaben/Bio/Nachweis%20von%20Eiwei%C3%9F.doc\">\n                    Nachweis von Eiweiß\n                </a>\n            </li>\n            <li>\n                <a href=\"https://github.com/nbraack/nbraack.github.io/raw/master/Aufgaben/Bio/Nachweis%20von%20Kohlenhydraten.doc\">\n                    Nachweis von Kohlenhydraten\n                </a>\n            </li>\n        </ul>\n        <h2>Englisch</h2>\n        <ul>\n            <li>\n                <a href=\"https://github.com/nbraack/nbraack.github.io/raw/master/Aufgaben/Englisch/English%20Assignment.doc\">\n                    English Assignment\n                </a>\n            </li>\n        </ul>\n        <h2>Gesellschaft</h2>\n        <ul>\n            <li>\n                <a href=\"https://github.com/nbraack/nbraack.github.io/raw/master/Aufgaben/Gesellschaft/Geschichte.pdf\">\n                    Geschichte\n                </a>\n            </li>\n            <li>\n                <a href=\"https://github.com/nbraack/nbraack.github.io/raw/master/Aufgaben/Gesellschaft/Planet%20Schule%20Rallye-Mittelalter.pdf\">\n                    Rallye\n                </a>\n            </li>\n        </ul>\n    </div>\n);\n","import React from 'react';\nimport { useSub, NavigationState } from '../store';\nimport { CalendarPage } from './CalendarPage';\nimport { DutiesPage } from './DutiesPage';\nimport { ReviewPage } from './ReviewPage';\nimport { TasksPage } from './TasksPage';\n\nexport const Content = () => {\n    const { navigation } = useSub(({ navigation }) => ({ navigation }));\n\n    if (navigation === NavigationState.DUTIES) return <DutiesPage />;\n    if (navigation === NavigationState.REVIEW) return <ReviewPage />;\n    if (navigation === NavigationState.CALENDAR) return <CalendarPage />;\n\n    return <TasksPage />;\n};\n","import { Store, NavigationState } from '../store';\nimport { Persistore } from 'persistore';\n\nconst NAV_KEY = 'navigation';\n\nconst _set = (navigation: NavigationState): void => {\n    Persistore.set(NAV_KEY, navigation);\n    Store.set({ navigation });\n};\n\nconst navigateTo = (navigation: NavigationState) => () => _set(navigation);\n\nconst _get = (): NavigationState => {\n    const current = Persistore.get(NAV_KEY);\n    if (current === NavigationState.DUTIES) return NavigationState.DUTIES;\n    if (current === NavigationState.REVIEW) return NavigationState.REVIEW;\n    if (current === NavigationState.CALENDAR) return NavigationState.CALENDAR;\n    return NavigationState.TASKS;\n};\n\nStore.set({ navigation: _get() });\n\nexport const NavigationStore = { navigateTo };\n","import React, { useMemo } from 'react';\nimport { NavigationState, useSub } from '../store';\nimport { NavigationStore } from '../util/navigation-store';\n\ntype NavigationButton = { type: NavigationState; label: string };\nconst NavigationButtons: ReadonlyArray<NavigationButton> = [\n    { type: NavigationState.TASKS, label: 'Aufgaben' },\n    { type: NavigationState.CALENDAR, label: 'Termine' },\n    { type: NavigationState.DUTIES, label: 'Ämter' },\n    { type: NavigationState.REVIEW, label: 'Kronen' },\n];\n\nexport const Header = () => {\n    const { navigation } = useSub(({ navigation }) => ({ navigation }));\n\n    const buttons = useMemo(\n        () =>\n            NavigationButtons.filter(button => button.type !== navigation).map(btn => (\n                <button onClick={NavigationStore.navigateTo(btn.type)} key={btn.type}>\n                    {btn.label}\n                </button>\n            )),\n        [navigation]\n    );\n    return (\n        <header className=\"App-header\">\n            <img src=\"/nb-logo.svg\" className=\"App-logo\" alt=\"logo\" />\n            <div className=\"navigation\">{buttons}</div>\n        </header>\n    );\n};\n","export const Globals = {\n    window: () => window,\n    document: () => document,\n    navigator: (): any => navigator,\n    onLine: (): boolean => !('onLine' in Globals.navigator()) || Globals.navigator().onLine,\n    timestamp: () => Date.now(),\n};\n","import React, { ReactNode, useCallback, useEffect, useState } from 'react';\nimport { Globals } from './globals';\nimport { IconUndo } from './components/icons/icon';\n\nconst reloadPage = () => {\n    Globals.window().open(window.location.href, '_self');\n};\n\nlet newSWInstalledCb = () => {};\n\nconst registerServiceWorker = () =>\n    Globals.navigator()\n        .serviceWorker.register('/sw.js')\n        .then((reg: any /* ServiceWorkerRegistration */) => {\n            reg.onupdatefound = () => {\n                // reg.installing -> the installing worker, or undefined\n                // reg.waiting -> the waiting worker, or undefined\n                // reg.active -> the active worker, or undefined\n                const installingWorker = reg.installing;\n                const activeWorker = reg.active;\n                installingWorker.onstatechange = () => {\n                    // \"installing\" - the install event has fired, but not yet complete\n                    // \"installed\"  - install complete\n                    // \"activating\" - the activate event has fired, but not yet complete\n                    // \"activated\"  - fully active\n                    // \"redundant\"  - discarded. Either failed install, or it's been\n                    //                replaced by a newer version\n                    if (installingWorker.state === 'installed' && activeWorker) newSWInstalledCb();\n                };\n            };\n        })\n        .catch(() => Globals.window().console.error('service worker registration failed'));\n\nconst initServiceWorker = () => {\n    if (process.env.NODE_ENV !== 'development') {\n        'serviceWorker' in navigator && window.addEventListener('load', registerServiceWorker);\n    }\n};\n\nconst doAfter = (ms: number, cb: () => void): Promise<void> =>\n    new Promise(resolve =>\n        Globals.window().setTimeout(() => {\n            cb();\n            resolve();\n        }, ms)\n    );\n\nexport const ServiceWorkerUpdater = () => {\n    const [content, setContent] = useState<ReactNode | void>();\n\n    const contentDelayed = useCallback(\n        (delay: number, content: ReactNode): Promise<void> => doAfter(delay, () => setContent(content)),\n        []\n    );\n\n    const initRefresh = useCallback(\n        () =>\n            Promise.all([\n                contentDelayed(0, 'Update gefunden'),\n                contentDelayed(1000, 'Update anwenden'),\n                contentDelayed(1300, 'Update anwenden.'),\n                contentDelayed(1600, 'Update anwenden..'),\n                contentDelayed(1900, 'Update anwenden...'),\n                contentDelayed(2200, <IconUndo />),\n                doAfter(2500, reloadPage),\n            ]),\n        [] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n\n    useEffect(() => {\n        newSWInstalledCb = initRefresh;\n        initServiceWorker();\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    if (!content) return null;\n\n    return (\n        <div className=\"sw-update\">\n            <div className=\"sw-update-overlay\" />\n            <div className=\"sw-update-content\">{content}</div>\n        </div>\n    );\n};\n","import { Store, CalendarEvent } from '../store';\n\nexport const parseDate = (value?: any): Date | void => {\n    if (value) {\n        const matchWithTime = value.match(/^([0-9]{2})\\.([0-9]{2})\\.([0-9]{4}) ([0-9]{1,2}):([0-9]{2})$/);\n        const matchWithoutTime = value.match(/^([0-9]{2})\\.([0-9]{2})\\.([0-9]{4})$/);\n\n        if (!matchWithTime && !matchWithoutTime) return;\n\n        const usedMatch = matchWithTime ? matchWithTime : [...matchWithoutTime, 0, 0];\n\n        // extract information\n        const year = Number(usedMatch[3]);\n        const month = Number(usedMatch[2]) - 1;\n        const day = Number(usedMatch[1]);\n        const hour = Number(usedMatch[4]);\n        const minute = Number(usedMatch[5]);\n        // parse it\n        const parsed = new Date(Date.UTC(year, month, day, hour, minute));\n        const dateIsValid = year === parsed.getFullYear() && month === parsed.getMonth();\n\n        if (!dateIsValid) return;\n\n        return parsed; // return valid date\n    }\n};\n\ntype CalendarEventFromJson = { title: string; start: string; end?: string; desc?: string; color?: string };\n\nconst parseEvent = ({ title, start, end, desc, color }: CalendarEventFromJson): CalendarEvent | void => {\n    const startDate = parseDate(start);\n    const endDate = end ? parseDate(end) : startDate;\n    return startDate && endDate ? { title, start: startDate, end: endDate, desc, color } : undefined;\n};\n\nexport const loadCalendarEvents = () =>\n    fetch('/events.json', { headers: { 'cache-control': 'no-cache', pragma: 'no-cache' } })\n        .then(r => r.json())\n        .then(({ events }) => {\n            const parsedEvents = events.map(parseEvent).filter(Boolean);\n            Store.set({ events: parsedEvents });\n        })\n        // eslint-disable-next-line no-console\n        .catch(console.error);\n","import './assets/main.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { Globals } from './globals';\nimport { ServiceWorkerUpdater } from './sw-logic';\nimport { loadCalendarEvents } from './util/load-calendar-events';\nimport { loadReviews } from './util/load-reviews';\n\nconst root = Globals.document().getElementById('root');\nReactDOM.render(\n    <>\n        <App />\n        <ServiceWorkerUpdater />\n    </>,\n    root\n);\n\nloadCalendarEvents();\nloadReviews();\n","import React from 'react';\nimport { Content } from './components/Content';\nimport { Header } from './components/Header';\n\nexport const App = () => (\n    <div className=\"App\">\n        <Header />\n        <div className=\"App-content\">\n            <Content />\n        </div>\n    </div>\n);\n","import { Store } from '../store';\n\nexport const loadReviews = () =>\n    fetch('/reviews.json', { headers: { 'cache-control': 'no-cache', pragma: 'no-cache' } })\n        .then(r => r.json())\n        .then(({ reviews, version, since }) => {\n            const parsedVersion = version || 'konnte nicht geladen werden';\n            const parsedSince = since || 'konnte nicht geladen werden';\n            Store.set({ reviewsData: { version: parsedVersion, reviews, since: parsedSince } });\n        })\n        .catch(() => {});\n"],"sourceRoot":""}