{"version":3,"sources":["store.ts","util/util.ts","components/icons/icon.tsx","components/SelectedEvent.tsx","components/Calendar.tsx","components/CalendarPage.tsx","data/students.ts","components/DutiesPage.tsx","components/ReviewRow.tsx","components/ReviewPage.tsx","components/Content.tsx","util/navigation-store.ts","components/Header.tsx","globals.ts","sw-logic.tsx","util/load-calendar-events.ts","index.tsx","App.tsx","util/load-reviews.ts"],"names":["NavigationState","createStore","navigation","CALENDAR","events","reviewsData","version","reviews","since","selectedEvent","useSub","Store","Util","classes","filter","clazz","Boolean","join","_Icon","symbol","props","width","className","viewBox","fill","d","Icons","IconCalendarDay","IconChevronRight","IconChevronLeft","IconTimes","IconUndo","WEEKDAY_NAMES","_withLeadingZero","num","slice","formatDate","date","getDay","getDate","getMonth","getFullYear","hours","getUTCHours","minutes","getMinutes","formatTime","clearSelectedEvent","set","SelectedEvent","title","start","end","desc","onClick","MONTH_NAMES","_NOW","Date","NOW","THIS_MONTH_AND_YEAR","month","year","_getDisplayEvent","event","isStart","isEnd","row","eventClass","titleSpace","Math","min","ceil","_eventClass","showTitle","undefined","zIndex","select","backgroundColor","color","Calendar","useState","setMonthAndYear","dates","useMemo","result","map","Array","possibleStartIdx","findIndex","possibleEndIdx","endIdx","length","startIdx","eventsForDate","e","i","calculateEvents","offsetLeft","_","index","next","push","offsetRight","concat","calculateDates","prevMonth","useCallback","nextMonth","weekday","key","style","CalendarPage","Students","split","now","mondaysCount","floor","UTC","timestamp","Duties","DutyImages","DutiesAndStudents","duty","studentIndex","pos","base","imageName","image","alt","students","Duty","src","student","DutiesPage","ReviewRow","review","name","crowns","warnings","evils","necessary","rewards","ReviewPage","Content","DUTIES","REVIEW","current","Persistore","get","_get","NavigationStore","_set","NavigationButtons","type","label","Header","buttons","button","btn","Globals","window","document","navigator","onLine","reloadPage","open","location","href","newSWInstalledCb","registerServiceWorker","serviceWorker","register","then","reg","onupdatefound","installingWorker","installing","activeWorker","active","onstatechange","state","catch","console","error","doAfter","ms","cb","Promise","resolve","setTimeout","parseDate","value","matchWithTime","match","matchWithoutTime","usedMatch","Number","day","hour","minute","parsed","parseEvent","startDate","endDate","root","getElementById","ReactDOM","render","content","setContent","contentDelayed","delay","initRefresh","all","useEffect","addEventListener","fetch","headers","pragma","r","json","parsedEvents","parsedVersion","parsedSince"],"mappings":"2JAwBYA,E,wDAAAA,K,oBAAAA,E,gBAAAA,E,iBAAAA,M,WAaYC,YAAmB,CACvCC,WAAYF,EAAgBG,SAC5BC,OAAQ,GACRC,YAAa,CAAEC,QAAS,GAAIC,QAAS,GAAIC,MAAO,IAChDC,cAAe,O,mBAJZC,E,KAAQC,E,0BC3BFC,EAVM,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAA+BA,EAAQC,QAAO,SAACC,GAAD,OAAoBC,QAAQD,MAAQE,KAAK,MCMpGC,EAAQ,SAACC,GAAD,IAA6BC,EAA7B,uDAAgD,GAAIC,EAApD,uDAAoE,IAApE,OACV,yBAAKC,UAAWF,EAAME,UAAYF,EAAME,UAAY,QAAU,OAAQC,QAAO,cAASF,EAAT,SACzE,0BAAMG,KAAK,eAAeC,EAAGC,EAAMP,OAI9BQ,EAAuC,SAACP,GAAD,OAAsBF,EAAM,eAAgBE,EAAO,MAC1FQ,EAAwC,SAACR,GAAD,OAAsBF,EAAM,gBAAiBE,EAAO,MAC5FS,EAAuC,SAACT,GAAD,OAChDF,EAAM,gBAAD,eAAuBE,EAAvB,CAA8BE,UAAWV,EAAgB,UAAWQ,EAAME,aAAc,MACpFQ,EAAiC,SAACV,GAAD,OAAsBF,EAAM,QAASE,EAAO,MAC7EW,EAAgC,SAACX,GAAD,OAAsBF,EAAM,OAAQE,ICb3EY,EAAgB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAErDC,EAAmB,SAACC,GAAD,OAAkB,IAAMA,GAAKC,OAAO,IAOvDC,EAAa,SAACC,GAAD,gBACZL,EAAcK,EAAKC,UADP,aACqBL,EAAiBI,EAAKE,WAD3C,YACyDN,EACpEI,EAAKG,WAAa,GAFP,YAGVH,EAAKI,eAHK,OALA,SAACJ,GAChB,IAAMK,EAAQL,EAAKM,cACbC,EAAUP,EAAKQ,aACrB,OAAOH,GAASE,EAAT,cAA0BF,EAA1B,YAAmCT,EAAiBW,GAApD,QAAqE,GAKlDE,CAAWT,KAEnCU,EAAqB,kBAAMpC,EAAMqC,IAAI,CAAEvC,cAAe,QAI/CwC,EAAgB,SAAC,GAA2C,IAAzCxC,EAAwC,EAAxCA,cACpByC,EAA4BzC,EAA5ByC,MAAOC,EAAqB1C,EAArB0C,MAAOC,EAAc3C,EAAd2C,IAAKC,EAAS5C,EAAT4C,KAE3B,OACI,yBAAK/B,UAAU,iBAAiBgC,QAASP,GACrC,yBAAKzB,UAAU,aACX,kBAACQ,EAAD,OAEJ,yBAAKR,UAAU,4BACX,yBAAKA,UAAU,eACX,0BAAMA,UAAU,SAAS4B,GACzB,8BACEC,KAAWC,EACT,oCACI,kBAACzB,EAAD,MADJ,IACyBS,EAAWe,IAGpC,oCACI,yBAAK7B,UAAU,cAAf,WACCc,EAAWe,GACZ,6BACA,yBAAK7B,UAAU,cAAf,SACCc,EAAWgB,IAGnBC,GAAQ,6BACRA,MCzCfE,EAAc,CAChB,SACA,UACA,UACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEEvB,EAAgB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAErDwB,EAAO,IAAIC,KACXC,EAAM,IAAID,KAAKD,EAAKf,cAAee,EAAKhB,WAAYgB,EAAKjB,WAGzDoB,EAAoC,CAAEC,MAAOF,EAAIlB,WAAYqB,KAAMH,EAAIjB,eA8CvEqB,EAAmB,SACrBC,EACA1B,EACA2B,EACAC,EACAC,GAEA,IAtBkBC,EAsBZC,EAAaC,KAAKC,IAAID,KAAKE,OAAOR,EAAMX,KAAOf,GAvDzC,QAuD6D,EAAIA,EAAKC,UAAY,EAAK,GAC7FhB,EA5BU,SAAC0C,EAAkBC,GACnC,OAAID,EAAgBC,EAAQ,SAAW,QAC3BA,EAAQ,MAAQ,SA0BVO,CAAYR,EAASC,GACjC5C,EAAK,eAAwB,IAAb+C,EAAX,gBAxBOD,EAwBwC7C,EAvBvC,WAAf6C,EAAgC,EACZ,WAAfA,EAAgC,GAC7B,KAqBD,gBAAiEC,EAAa,EAAI,GAAM,EAAxF,OACLK,EAAYT,GAA6B,IAAlB3B,EAAKC,SAGlC,MAAO,CAAEY,MAFKuB,EAAYV,EAAMb,WAAQwB,EAExBC,OADDF,EAAY,OAAIC,EACPE,OAAQ,kBAjFfnE,EAiFiCsD,EAjFApD,EAAMqC,IAAI,CAAEvC,kBAA9C,IAACA,GAiFyCY,QAAOC,YAAW4C,MAAKW,gBAAiBd,EAAMe,QAkC/FC,EAAqB,WAC9B,IAAM3E,EAASM,GAAO,qBAAGN,UADW,EAEO4E,mBAASrB,GAFhB,0BAE3BC,EAF2B,EAE3BA,MAAOC,EAFoB,EAEpBA,KAAQoB,EAFY,KAG9BC,EAAQC,mBAAQ,kBAjCF,SAACD,EAAe9E,GACpC,IAAMgF,EAAwBF,EAAMG,KAAI,SAAAhD,GAAI,MAAK,CAAEA,OAAMjC,OAAQ,IAAIkF,MAAM,GAAG9D,UAAKkD,OADJ,uBAE/E,IAF+E,IAE/E,EAF+E,iBAEpEX,EAFoE,QAGnEZ,EAAeY,EAAfZ,MAAOC,EAAQW,EAARX,IACTmC,EAAmBL,EAAMM,WAAU,SAAAnD,GAAI,OAAKc,GAASd,EArEnD,OAqEqEc,EAAQd,KAC/EoD,EAAiBP,EAAMM,WAAU,SAAAnD,GAAI,OAAKe,GAAOf,EAtE/C,OAsEiEe,EAAMf,KAEzEqD,EAASD,EAAiB,GAAKrC,EAAM8B,EAAMA,EAAMS,OAAS,GAAKT,EAAMS,OAAS,EAAIF,EAClFG,EAAWL,EAAmB,GAAKpC,EAAQ+B,EAAM,GAAK,EAAIK,EAEhE,GAAIK,GAAY,GAAKF,GAAU,EAAG,CAC9B,IAAMG,EAAgBT,EAAOQ,GAAUxF,OACjC8D,EAAM2B,EAAcL,WAAU,SAAAM,GAAC,YAAUpB,IAANoB,KACzC,GAAI5B,GAAO,EAAG,CACV2B,EAAc3B,GAAOJ,EACjBC,EACAmB,EAAMU,GACNA,IAAaL,EACbK,IAAaH,EACbvB,GAEJ,IAAK,IAAI6B,EAAIH,EAAW,EAAGG,GAAKL,EAAQK,IACpCX,EAAOW,GAAG3F,OAAO8D,GAAOJ,EAAiBC,EAAOmB,EAAMa,IAAI,EAAOA,IAAMN,EAAgBvB,MApBvG,EAAoB9D,EAApB,+CAA6B,IAFkD,kFA2B/E,OAAOgF,EAMqBY,CA9FT,SAACnC,EAAcD,GAOlC,IANA,IACMqC,GADe,IAAIxC,KAAKI,EAAMD,EAAO,GACVtB,SAAW,GAAK,EAC3C8C,EAAS,IAAIE,MAAMW,GACpBzE,UAAKkD,GACLW,KAAI,SAACa,EAAGC,GAAJ,OAAc,IAAI1C,KAAKI,EAAMD,EAAOuC,EAAQF,EAAa,MAEzDF,EAAI,EAAGA,GAAK,GAAIA,IAAK,CAC1B,IAAMK,EAAO,IAAI3C,KAAKI,EAAMD,EAAOmC,GACnC,GAAIK,EAAK5D,aAAeoB,EAGpB,MAFAwB,EAAOiB,KAAKD,GAMpB,IAAME,EAAc,EAAIlB,EAAOA,EAAOO,OAAS,GAAGrD,SAClD,OAAO8C,EAAOmB,OACV,IAAIjB,MAAMgB,GAAa9E,UAAKkD,GAAWW,KAAI,SAACa,EAAGC,GAAJ,OAAc,IAAI1C,KAAKI,EAAMD,EAAQ,EAAGuC,EAAQ,OA4EnDK,CAAe3C,EAAMD,GAAQxD,KAAS,CAACyD,EAAMD,EAAOxD,IAE1FqG,EAAYC,uBACd,kBACIzB,GAAgB,gBAAGrB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,MAAsB,CAClCD,MAAiB,IAAVA,EAAc,GAAKA,EAAQ,EAClCC,KAAgB,IAAVD,EAAcC,EAAO,EAAIA,QAEvC,IAEE8C,EAAYD,uBACd,kBACIzB,GAAgB,gBAAGrB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,MAAsB,CAClCD,MAAiB,KAAVA,EAAe,EAAIA,EAAQ,EAClCC,KAAgB,KAAVD,EAAeC,EAAO,EAAIA,QAExC,IAGJ,OACI,yBAAKvC,UAAU,YACX,yBAAKA,UAAU,SACX,0BAAMgC,QAASmD,EAAWnF,UAAU,SAChC,kBAAC,EAAD,OAEJ,0BAAMA,UAAU,SACXiC,EAAYK,GADjB,IAC0BC,GAE1B,0BAAMP,QAASqD,EAAWrF,UAAU,SAChC,kBAACM,EAAD,QAGR,yBAAKN,UAAU,QACVU,EAAcqD,KAAI,SAAAuB,GAAO,OACtB,yBAAKC,IAAKD,EAAStF,UAAU,WACxBsF,MAGR1B,EAAMG,KAAI,gBAAGhD,EAAH,EAAGA,KAAMjC,EAAT,EAASA,OAAT,OACP,yBACIyG,KAAMxE,EACNf,UAAWV,EACP,OACAyB,EAAKG,aAAeoB,GAAS,YAC5BvB,KAAUqB,GAAO,YAEtB,0BAAMpC,UAAU,SAASe,EAAKE,WAC7BnC,EAAOiF,KAAI,SAACtB,EAAOoC,GAChB,IAAKpC,EAAO,OAAO,kBAAC,WAAD,CAAU8C,IAAKV,IADA,IAE1BjD,EAAkEa,EAAlEb,MAAOyB,EAA2DZ,EAA3DY,OAAQtD,EAAmD0C,EAAnD1C,MAAOC,EAA4CyC,EAA5CzC,UAAW4C,EAAiCH,EAAjCG,IAAKU,EAA4Bb,EAA5Ba,OAAQC,EAAoBd,EAApBc,gBACtD,OACI,yBACIvB,QAASsB,EACTiC,IAAKV,EACLW,MAAO,CAAEzF,QAAOsD,SAAQE,mBACxBvD,UAAWV,EAAgB,QAAS,SAAWsD,EAAK5C,IACnD4B,GAAS,uDC9KjC6D,EAAe,WAAO,IACvBtG,EAAkBC,GAAO,kBAAwB,CAAED,cAA1B,EAAGA,kBAA5BA,cACR,OACI,yBAAKa,UAAU,iBACX,uCACA,kBAAC,EAAD,MACCb,GAAiB,kBAAC,EAAD,CAAeA,cAAeA,MCX/CuG,EAAW,+JAA+JC,MACnL,KCEEvD,EAAMD,KAAKyD,MAkBXC,EAdoB9C,KAAK+C,QAAQ1D,EAAMD,KAAK4D,IAAI,KAAM,EAAG,IAAM,MAAW,GAAK,GAE7D,CACpB5D,KAAK4D,IAAI,KAAM,EAAG,GAClB5D,KAAK4D,IAAI,KAAM,EAAG,IAClB5D,KAAK4D,IAAI,KAAM,GAAI,IACnB5D,KAAK4D,IAAI,KAAM,GAAI,IACnB5D,KAAK4D,IAAI,KAAM,EAAG,GAClB5D,KAAK4D,IAAI,KAAM,EAAG,GAClB5D,KAAK4D,IAAI,KAAM,EAAG,KAGuBvG,QAAO,SAAAwG,GAAS,OAAIA,GAAa5D,KAAKiC,OAI7E4B,EAAS,0HAAiHN,MAC5H,KAEEO,EAAa,qDAAqDP,MAAM,KAKxEQ,EAAoBF,EAAOlC,KAAe,SAACqC,EAAMvB,GACnD,IAAMwB,EAAe,SAACC,GAAD,OAHT1F,GAGkC,EAAIiF,EAAe,EAAIhB,EA5BvD,GA4B2EyB,EAHhEC,EAGqEb,EAASrB,QAH3DzD,EAAM2F,EAAQA,GAAQA,EAAvD,IAAC3F,EAAa2F,GAInBC,EAAYN,EAAWrB,GAC7B,MAAO,CACHuB,OACAK,MAAM,IAAD,OAAMD,EAAN,QACLE,IAAKN,EACLO,SAAU,CAACjB,EAASW,EAAa,IAAKX,EAASW,EAAa,SAI9DO,EAAO,SAAC,GAAD,IAAGR,EAAH,EAAGA,KAAMK,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,IAAKC,EAArB,EAAqBA,SAArB,OACT,yBAAK3G,UAAU,QACX,yBAAKA,UAAU,cAAcoG,GAC7B,yBAAKpG,UAAU,cACX,yBAAK6G,IAAKJ,EAAOC,IAAKA,KAEzBC,EAAS5C,KAAI,SAAC+C,EAASjC,GAAV,OACV,yBAAK7E,UAAU,UAAUuF,IAAKV,GACzBiC,MAGT,+BAIKC,EAAa,kBACtB,yBAAK/G,UAAU,UACVmG,EAAkBpC,KAAI,SAACqC,EAAMvB,GAAP,OACnB,kBAAC,EAAD,eAAMU,IAAKV,GAAWuB,SCvDrBY,EAAY,SAAC,GAAD,QAAGC,OAAUC,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,SAAUC,EAArC,EAAqCA,MAAOC,EAA5C,EAA4CA,UAAWC,EAAvD,EAAuDA,QAAvD,OACrB,wBAAIvH,UAAWsH,EAAY,YAASlE,GAChC,4BAAK8D,GACL,4BACKC,EACAI,EAAU,0BAAMvH,UAAU,WAAWuH,GAAkB,MAE5D,4BAAKH,GACL,4BAAKC,GACL,4BAAKC,GAAa,MCVbE,EAAa,WAAO,IAAD,EAGxBpI,GAAO,kBAAsB,CAAEL,YAAxB,EAAGA,gBADVA,YAAeC,EAFS,EAETA,QAASC,EAFA,EAEAA,QAASC,EAFT,EAESA,MAErC,OACI,yBAAKc,UAAU,WACX,2CACA,2BAAOA,UAAU,cACb,+BACI,4BACI,oCACA,4CACA,4CACA,4CACA,8CAGR,+BACKf,EAAQ8E,KAAI,SAAAkD,GAAM,OACf,kBAAC,EAAD,CAAW1B,IAAK0B,EAAOC,KAAMD,OAAQA,SAdrD,mCAkBkC/H,EAC9B,6BAnBJ,oBAoBsBF,EAClB,4BACI,gEACA,uEACA,sEACA,kFC5BHyI,EAAU,WAAO,IAClB7I,EAAeQ,GAAO,kBAAqB,CAAER,WAAvB,EAAGA,eAAzBA,WAER,OAAIA,IAAeF,EAAgBgJ,OAAe,kBAAC,EAAD,MAC9C9I,IAAeF,EAAgBiJ,OAAe,kBAAC,EAAD,MAE3C,kBAAC,EAAD,O,OCOXtI,EAAMqC,IAAI,CAAE9C,WAPC,WACT,IAAMgJ,EAAUC,IAAWC,IAVf,cAWZ,OAAIF,IAAYlJ,EAAgBgJ,OAAehJ,EAAgBgJ,OAC3DE,IAAYlJ,EAAgBiJ,OAAejJ,EAAgBiJ,OACxDjJ,EAAgBG,SAGHkJ,KAEjB,IAAMC,EAXM,SAACpJ,GAAD,OAAiC,kBALvC,SAACA,GACViJ,IAAWnG,IAHC,aAGY9C,GACxBS,EAAMqC,IAAI,CAAE9C,eAG0CqJ,CAAKrJ,KCLzDsJ,EAAqD,CACvD,CAAEC,KAAMzJ,EAAgBG,SAAUuJ,MAAO,WACzC,CAAED,KAAMzJ,EAAgBgJ,OAAQU,MAAO,YACvC,CAAED,KAAMzJ,EAAgBiJ,OAAQS,MAAO,WAG9BC,EAAS,WAAO,IACjBzJ,EAAeQ,GAAO,kBAAqB,CAAER,WAAvB,EAAGA,eAAzBA,WAEF0J,EAAUzE,mBACZ,kBACIqE,EAAkB1I,QAAO,SAAA+I,GAAM,OAAIA,EAAOJ,OAASvJ,KAAYmF,KAAI,SAAAyE,GAAG,OAClE,4BAAQxG,QAASgG,EAA2BQ,EAAIL,MAAO5C,IAAKiD,EAAIL,MAC3DK,EAAIJ,YAGjB,CAACxJ,IAEL,OACI,4BAAQoB,UAAU,cACd,yBAAK6G,IAAI,eAAe7G,UAAU,WAAW0G,IAAI,SACjD,yBAAK1G,UAAU,cAAcsI,KC1B5BG,EAAU,CACnBC,OAAO,SAAD,mGAAC,EAAC,kBAAMA,UACdC,SAAS,SAAD,mGAAC,EAAC,kBAAMA,YAChBC,UAAU,SAAD,mGAAC,EAAC,kBAAWA,aACtBC,OAAQ,mBAAiB,WAAYJ,EAAQG,cAAgBH,EAAQG,YAAYC,QACjF7C,UAAW,kBAAM7D,KAAKyD,QCDpBkD,EAAa,WACfL,EAAQC,SAASK,KAAKL,OAAOM,SAASC,KAAM,UAG5CC,GAAmB,aAEjBC,GAAwB,kBAC1BV,EAAQG,YACHQ,cAAcC,SAAS,UACvBC,MAAK,SAACC,GACHA,EAAIC,cAAgB,WAIhB,IAAMC,EAAmBF,EAAIG,WACvBC,EAAeJ,EAAIK,OACzBH,EAAiBI,cAAgB,WAOE,cAA3BJ,EAAiBK,OAAyBH,GAAcT,UAIvEa,OAAM,kBAAMtB,EAAQC,SAASsB,QAAQC,MAAM,0CAQ9CC,GAAU,SAACC,EAAYC,GAAb,OACZ,IAAIC,SAAQ,SAAAC,GAAO,OACf7B,EAAQC,SAAS6B,YAAW,WACxBH,IACAE,MACDH,OC1CEK,GAAY,SAACC,GACtB,GAAIA,EAAO,CACP,IAAMC,EAAgBD,EAAME,MAAM,gEAC5BC,EAAmBH,EAAME,MAAM,wCAErC,IAAKD,IAAkBE,EAAkB,OAEzC,IAAMC,EAAYH,GAAa,sBAAuBE,GAAvB,CAAyC,EAAG,IAGrErI,EAAOuI,OAAOD,EAAU,IACxBvI,EAAQwI,OAAOD,EAAU,IAAM,EAC/BE,EAAMD,OAAOD,EAAU,IACvBG,EAAOF,OAAOD,EAAU,IACxBI,EAASH,OAAOD,EAAU,IAE1BK,EAAS,IAAI/I,KAAKA,KAAK4D,IAAIxD,EAAMD,EAAOyI,EAAKC,EAAMC,IAGzD,KAFoB1I,IAAS2I,EAAO/J,eAAiBmB,IAAU4I,EAAOhK,YAEpD,OAElB,OAAOgK,IAMTC,GAAa,SAAC,GAAqF,IAAnFvJ,EAAkF,EAAlFA,MAAOC,EAA2E,EAA3EA,MAAOC,EAAoE,EAApEA,IAAKC,EAA+D,EAA/DA,KAAMyB,EAAyD,EAAzDA,MACrC4H,EAAYZ,GAAU3I,GACtBwJ,EAAUvJ,EAAM0I,GAAU1I,GAAOsJ,EACvC,OAAOA,GAAaC,EAAU,CAAEzJ,QAAOC,MAAOuJ,EAAWtJ,IAAKuJ,EAAStJ,OAAMyB,cAAUJ,GCtBrFkI,GAAO7C,EAAQE,WAAW4C,eAAe,QAC/CC,IAASC,OACL,oCACI,mBCTW,kBACf,yBAAKzL,UAAU,OACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,eACX,kBAAC,EAAD,UDKJ,MACA,mBFiC4B,WAAO,IAAD,EACR0D,qBADQ,mBAC/BgI,EAD+B,KACtBC,EADsB,KAGhCC,EAAiBxG,uBACnB,SAACyG,EAAeH,GAAhB,OAAsDxB,GAAQ2B,GAAO,kBAAMF,EAAWD,QACtF,IAGEI,EAAc1G,uBAChB,kBACIiF,QAAQ0B,IAAI,CACRH,EAAe,EAAG,mBAClBA,EAAe,IAAM,mBACrBA,EAAe,KAAM,oBACrBA,EAAe,KAAM,qBACrBA,EAAe,KAAM,sBACrBA,EAAe,KAAM,kBAACnL,EAAD,OACrByJ,GAAQ,KAAMpB,OAEtB,IAQJ,OALAkD,qBAAU,WACN9C,GAAmB4C,EAnCnB,kBAAmBlD,WAAaF,OAAOuD,iBAAiB,OAAQ9C,MAqCjE,IAEEuC,EAGD,yBAAK1L,UAAU,aACX,yBAAKA,UAAU,sBACf,yBAAKA,UAAU,qBAAqB0L,IALvB,OE5DjB,OAEJJ,IDoBAY,MAAM,eAAgB,CAAEC,QAAS,CAAE,gBAAiB,WAAYC,OAAQ,cACnE9C,MAAK,SAAA+C,GAAC,OAAIA,EAAEC,UACZhD,MAAK,YAAiB,IACbiD,EADY,EAAbzN,OACuBiF,IAAIoH,IAAY3L,OAAOE,SACnDL,EAAMqC,IAAI,CAAE5C,OAAQyN,OAGvBxC,MAAMC,QAAQC,OGxCnBiC,MAAM,gBAAiB,CAAEC,QAAS,CAAE,gBAAiB,WAAYC,OAAQ,cACpE9C,MAAK,SAAA+C,GAAC,OAAIA,EAAEC,UACZhD,MAAK,YAAkC,IAA/BrK,EAA8B,EAA9BA,QACCuN,EAD6B,EAArBxN,SACmB,8BAC3ByN,EAF6B,EAAZvN,OAEM,8BAC7BG,EAAMqC,IAAI,CAAE3C,YAAa,CAAEC,QAASwN,EAAevN,UAASC,MAAOuN,QAEtE1C,OAAM,gB","file":"static/js/main.1446f8f8.chunk.js","sourcesContent":["import { createStore } from 'react-use-sub';\n\nexport type CalendarEvent = {\n    title: string;\n    start: Date;\n    end: Date;\n    desc?: string;\n    color?: string;\n};\n\nexport type Review = {\n    name: string;\n    crowns: number;\n    warnings: number;\n    evils: number;\n    necessary?: number;\n    rewards?: number;\n};\nexport type ReviewsData = {\n    reviews: ReadonlyArray<Review>;\n    version: string;\n    since: string;\n};\n\nexport enum NavigationState {\n    CALENDAR = 'calendar',\n    DUTIES = 'duties',\n    REVIEW = 'review',\n}\n\ntype State = {\n    navigation: NavigationState;\n    events: CalendarEvent[];\n    reviewsData: ReviewsData;\n    selectedEvent: CalendarEvent | null;\n};\n\nconst [useSub, Store] = createStore<State>({\n    navigation: NavigationState.CALENDAR,\n    events: [],\n    reviewsData: { version: '', reviews: [], since: '' },\n    selectedEvent: null,\n});\n\nexport { useSub, Store };\n","const classNames = (...classes: any[]): string => classes.filter((clazz?: string) => Boolean(clazz)).join(' ');\n\nconst array = (num: number): Array<void> => [...Array(num)];\n\nconst nextArray = <T>(before: T[], index: number, value: T): T[] => [\n    ...before.slice(0, index),\n    value,\n    ...before.slice(index + 1),\n];\n\nexport const Util = { array, classNames, nextArray };\n","import React from 'react';\nimport Icons from './icon-path.json';\nimport { Util } from '../../util/util';\n\ntype IconProps = { className?: string };\n\nconst _Icon = (symbol: keyof typeof Icons, props: IconProps = {}, width: number = 512) => (\n    <svg className={props.className ? props.className + ' icon' : 'icon'} viewBox={`0 0 ${width} 512`}>\n        <path fill=\"currentColor\" d={Icons[symbol]} />\n    </svg>\n);\n\nexport const IconCalendarDay: React.FC<IconProps> = (props: IconProps) => _Icon('CALENDAR_DAY', props, 448);\nexport const IconChevronRight: React.FC<IconProps> = (props: IconProps) => _Icon('CHEVRON_RIGHT', props, 320);\nexport const IconChevronLeft: React.FC<IconProps> = (props: IconProps) =>\n    _Icon('CHEVRON_RIGHT', { ...props, className: Util.classNames('reflect', props.className) }, 320);\nexport const IconTimes: React.FC<IconProps> = (props: IconProps) => _Icon('TIMES', props, 352);\nexport const IconUndo: React.FC<IconProps> = (props: IconProps) => _Icon('UNDO', props);\n","import React from 'react';\nimport { CalendarEvent, Store } from '../store';\nimport { IconCalendarDay, IconTimes } from './icons/icon';\n\nconst WEEKDAY_NAMES = ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'];\n\nconst _withLeadingZero = (num: number) => ('0' + num).slice(-2);\n\nconst formatTime = (date: Date): string => {\n    const hours = date.getUTCHours();\n    const minutes = date.getMinutes();\n    return hours || minutes ? ` um ${hours}:${_withLeadingZero(minutes)} Uhr` : '';\n};\nconst formatDate = (date: Date) =>\n    `${WEEKDAY_NAMES[date.getDay()]}, ${_withLeadingZero(date.getDate())}.${_withLeadingZero(\n        date.getMonth() + 1\n    )}.${date.getFullYear()}${formatTime(date)}`;\n\nconst clearSelectedEvent = () => Store.set({ selectedEvent: null });\n\nexport type SelectedEventProps = { selectedEvent: CalendarEvent };\n\nexport const SelectedEvent = ({ selectedEvent }: SelectedEventProps) => {\n    const { title, start, end, desc } = selectedEvent;\n\n    return (\n        <div className=\"selected-event\" onClick={clearSelectedEvent}>\n            <div className=\"close-btn\">\n                <IconTimes />\n            </div>\n            <div className=\"selected-event-container\">\n                <div className=\"description\">\n                    <span className=\"title\">{title}</span>\n                    <hr />\n                    {+start === +end ? (\n                        <>\n                            <IconCalendarDay /> {formatDate(start)}\n                        </>\n                    ) : (\n                        <>\n                            <div className=\"date-label\">Beginn:</div>\n                            {formatDate(start)}\n                            <hr />\n                            <div className=\"date-label\">Ende:</div>\n                            {formatDate(end)}\n                        </>\n                    )}\n                    {desc && <hr />}\n                    {desc}\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React, { useCallback, useMemo, useState, Fragment } from 'react';\nimport { Util } from '../util/util';\nimport { IconChevronLeft, IconChevronRight } from './icons/icon';\nimport { CalendarEvent, Store, useSub } from '../store';\n\nconst selectEvent = (selectedEvent: CalendarEvent) => Store.set({ selectedEvent });\n\nconst MONTH_NAMES = [\n    'Januar',\n    'Februar',\n    'März',\n    'April',\n    'Mai',\n    'Juni',\n    'Juli',\n    'August',\n    'September',\n    'Oktober',\n    'November',\n    'Dezember',\n];\nconst WEEKDAY_NAMES = ['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'];\n\nconst _NOW = new Date();\nconst NOW = new Date(_NOW.getFullYear(), _NOW.getMonth(), _NOW.getDate());\nconst ONE_DAY = 86400000; // 24 * 60 * 60 * 1000\ntype MonthAndYear = { month: number; year: number };\nconst THIS_MONTH_AND_YEAR: MonthAndYear = { month: NOW.getMonth(), year: NOW.getFullYear() };\n\nconst calculateDates = (year: number, month: number): Date[] => {\n    const firstOfMonth = new Date(year, month, 1);\n    const offsetLeft = (firstOfMonth.getDay() + 6) % 7;\n    const result = new Array(offsetLeft)\n        .fill(undefined)\n        .map((_, index) => new Date(year, month, index - offsetLeft + 1));\n\n    for (let i = 1; i <= 31; i++) {\n        const next = new Date(year, month, i);\n        if (next.getMonth() === month) {\n            result.push(next);\n        } else {\n            break;\n        }\n    }\n\n    const offsetRight = 7 - result[result.length - 1].getDay();\n    return result.concat(\n        new Array(offsetRight).fill(undefined).map((_, index) => new Date(year, month + 1, index + 1))\n    );\n};\n\ntype EventClass = 'single' | 'begin' | 'middle' | 'end';\n\nconst _eventClass = (isStart: boolean, isEnd: boolean): EventClass => {\n    if (isStart) return isEnd ? 'single' : 'begin';\n    else return isEnd ? 'end' : 'middle';\n};\n\nconst _eventMargin = (eventClass: EventClass): number => {\n    if (eventClass === 'single') return 1;\n    else if (eventClass === 'middle') return 0.5;\n    else return 0.75;\n};\n\ntype DisplayEvent = {\n    title?: string;\n    backgroundColor?: string;\n    zIndex?: number;\n    width: string;\n    select: () => void;\n    className: string;\n    row: number;\n};\nconst _getDisplayEvent = (\n    event: CalendarEvent,\n    date: Date,\n    isStart: boolean,\n    isEnd: boolean,\n    row: number\n): DisplayEvent => {\n    const titleSpace = Math.min(Math.ceil((+event.end - +date) / ONE_DAY), ((7 - date.getDay()) % 7) + 1);\n    const className = _eventClass(isStart, isEnd);\n    const width = `calc(${titleSpace * 100}% - ${_eventMargin(className)}em - ${titleSpace > 1 ? 0.5 : 0}em)`;\n    const showTitle = isStart || date.getDay() === 1;\n    const title = showTitle ? event.title : undefined;\n    const zIndex = showTitle ? 1 : undefined;\n    return { title, zIndex, select: () => selectEvent(event), width, className, row, backgroundColor: event.color };\n};\n\ntype DisplayDate = { date: Date; events: DisplayEvent[] };\nconst calculateEvents = (dates: Date[], events: CalendarEvent[]): DisplayDate[] => {\n    const result: DisplayDate[] = dates.map(date => ({ date, events: new Array(3).fill(undefined) }));\n    for (const event of events) {\n        const { start, end } = event;\n        const possibleStartIdx = dates.findIndex(date => +start < +date + ONE_DAY && start > date);\n        const possibleEndIdx = dates.findIndex(date => +end < +date + ONE_DAY && end > date);\n\n        const endIdx = possibleEndIdx < 0 && end > dates[dates.length - 1] ? dates.length - 1 : possibleEndIdx;\n        const startIdx = possibleStartIdx < 0 && start < dates[0] ? 0 : possibleStartIdx;\n\n        if (startIdx >= 0 && endIdx >= 0) {\n            const eventsForDate = result[startIdx].events;\n            const row = eventsForDate.findIndex(e => e === undefined);\n            if (row >= 0) {\n                eventsForDate[row] = _getDisplayEvent(\n                    event,\n                    dates[startIdx],\n                    startIdx === possibleStartIdx,\n                    startIdx === possibleEndIdx,\n                    row\n                );\n                for (let i = startIdx + 1; i <= endIdx; i++) {\n                    result[i].events[row] = _getDisplayEvent(event, dates[i], false, i === possibleEndIdx, row);\n                }\n            }\n        }\n    }\n    return result;\n};\n\nexport const Calendar: React.FC = () => {\n    const events = useSub(({ events }) => events);\n    const [{ month, year }, setMonthAndYear] = useState(THIS_MONTH_AND_YEAR);\n    const dates = useMemo(() => calculateEvents(calculateDates(year, month), events), [year, month, events]);\n\n    const prevMonth = useCallback(\n        () =>\n            setMonthAndYear(({ month, year }) => ({\n                month: month === 0 ? 11 : month - 1,\n                year: month === 0 ? year - 1 : year,\n            })),\n        []\n    );\n    const nextMonth = useCallback(\n        () =>\n            setMonthAndYear(({ month, year }) => ({\n                month: month === 11 ? 0 : month + 1,\n                year: month === 11 ? year + 1 : year,\n            })),\n        []\n    );\n\n    return (\n        <div className=\"calendar\">\n            <div className=\"month\">\n                <span onClick={prevMonth} className=\"arrow\">\n                    <IconChevronLeft />\n                </span>\n                <span className=\"value\">\n                    {MONTH_NAMES[month]} {year}\n                </span>\n                <span onClick={nextMonth} className=\"arrow\">\n                    <IconChevronRight />\n                </span>\n            </div>\n            <div className=\"grid\">\n                {WEEKDAY_NAMES.map(weekday => (\n                    <div key={weekday} className=\"weekday\">\n                        {weekday}\n                    </div>\n                ))}\n                {dates.map(({ date, events }) => (\n                    <div\n                        key={+date}\n                        className={Util.classNames(\n                            'date',\n                            date.getMonth() !== month && 'inactive',\n                            +date === +NOW && 'current'\n                        )}>\n                        <span className=\"value\">{date.getDate()}</span>\n                        {events.map((event, index: number) => {\n                            if (!event) return <Fragment key={index} />;\n                            const { title, zIndex, width, className, row, select, backgroundColor } = event;\n                            return (\n                                <div\n                                    onClick={select}\n                                    key={index}\n                                    style={{ width, zIndex, backgroundColor }}\n                                    className={Util.classNames('event', 'event-' + row, className)}>\n                                    {title || <>&nbsp;</>}\n                                </div>\n                            );\n                        })}\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport { useSub } from '../store';\nimport { SelectedEvent } from './SelectedEvent';\nimport { Calendar } from './Calendar';\n\nexport const CalendarPage = () => {\n    const { selectedEvent } = useSub(({ selectedEvent }) => ({ selectedEvent }));\n    return (\n        <div className=\"calendar-page\">\n            <h1>Termine</h1>\n            <Calendar />\n            {selectedEvent && <SelectedEvent selectedEvent={selectedEvent} />}\n        </div>\n    );\n};\n","export const Students = 'Emily,Yoan,Hadia,Wiam,Rehab,Aurel,Jaimie,Mohammad II,Yannik,Beyza,Ivan,Kenai,Yusuf,Sabit,Mohammad,Majd,Myron,Irene,Yassin,Hossein,Deswill,Lennart,Jaden,Lisa'.split(\n    ','\n);\n","import React from 'react';\nimport { Students } from '../data/students';\n\nconst NOW = Date.now();\nconst COUNT_FIX = 16;\n\n// 1000 * 60 * 60 * 24 = 86400000 (milliseconds of a day)\nconst countOfAllMondays = Math.floor(((NOW - Date.UTC(2019, 0, 1)) / 86400000 + 1) / 7);\n\nconst mondaysToIgnore = [\n    Date.UTC(2019, 9, 7),\n    Date.UTC(2019, 9, 14),\n    Date.UTC(2019, 11, 23),\n    Date.UTC(2019, 11, 30),\n    Date.UTC(2020, 2, 2),\n    Date.UTC(2020, 2, 9),\n    Date.UTC(2020, 4, 18),\n];\n\nconst countOfIgnoredInPast = mondaysToIgnore.filter(timestamp => timestamp <= NOW).length;\n\nconst mondaysCount = countOfAllMondays - countOfIgnoredInPast;\n\nconst Duties = 'Blumen gießen,Tafel wischen,Zettel austeilen,Müll wegbringen,Licht ausschalten,Fenster schließen,Fegen,Reserve'.split(\n    ','\n);\nconst DutyImages = 'plant,board,share,trash,light,window,sweep,reserve'.split(',');\ntype DutyProps = { duty: string; image: string; alt: string; students: string[] };\n\nconst modulo = (num: number, base: number) => ((num % base) + base) % base;\n\nconst DutiesAndStudents = Duties.map<DutyProps>((duty, index) => {\n    const studentIndex = (pos: number) => modulo(-2 * mondaysCount + 2 * index + COUNT_FIX + pos, Students.length);\n    const imageName = DutyImages[index];\n    return {\n        duty,\n        image: `/${imageName}.jpg`,\n        alt: duty,\n        students: [Students[studentIndex(0)], Students[studentIndex(1)]],\n    };\n});\n\nconst Duty = ({ duty, image, alt, students }: DutyProps) => (\n    <div className=\"duty\">\n        <div className=\"duty-title\">{duty}</div>\n        <div className=\"duty-image\">\n            <img src={image} alt={alt} />\n        </div>\n        {students.map((student, index) => (\n            <div className=\"student\" key={index}>\n                {student}\n            </div>\n        ))}\n        <hr />\n    </div>\n);\n\nexport const DutiesPage = () => (\n    <div className=\"duties\">\n        {DutiesAndStudents.map((duty, index) => (\n            <Duty key={index} {...duty} />\n        ))}\n    </div>\n);\n","import React from 'react';\nimport { Review } from '../store';\n\nexport type ReviewRowProps = { review: Review };\n\nexport const ReviewRow = ({ review: { name, crowns, warnings, evils, necessary, rewards } }: ReviewRowProps) => (\n    <tr className={necessary ? 'evil' : undefined}>\n        <td>{name}</td>\n        <td>\n            {crowns}\n            {rewards ? <span className=\"rewards\">{rewards}</span> : null}\n        </td>\n        <td>{warnings}</td>\n        <td>{evils}</td>\n        <td>{necessary || ''}</td>\n    </tr>\n);\n","import React from 'react';\nimport { useSub } from '../store';\nimport { ReviewRow } from './ReviewRow';\n\nexport const ReviewPage = () => {\n    const {\n        reviewsData: { version, reviews, since },\n    } = useSub(({ reviewsData }) => ({ reviewsData }));\n    return (\n        <div className=\"reviews\">\n            <h1>Kronenliste</h1>\n            <table className=\"pure-table\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>👑</th>\n                        <th>😩</th>\n                        <th>😡</th>\n                        <th>🚫</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {reviews.map(review => (\n                        <ReviewRow key={review.name} review={review} />\n                    ))}\n                </tbody>\n            </table>\n            Die Liste wird geführt seit: {since}\n            <br />\n            Aktualisiert am: {version}\n            <ul>\n                <li>👑 - Anzahl der Kronen</li>\n                <li>😩 - Anzahl der gelben Karten</li>\n                <li>😡 - Anzahl der roten Karten</li>\n                <li>🚫 - Anzahl der noch fehlenden Kronen</li>\n            </ul>\n        </div>\n    );\n};\n","import React from 'react';\nimport { useSub, NavigationState } from '../store';\nimport { CalendarPage } from './CalendarPage';\nimport { DutiesPage } from './DutiesPage';\nimport { ReviewPage } from './ReviewPage';\n\nexport const Content = () => {\n    const { navigation } = useSub(({ navigation }) => ({ navigation }));\n\n    if (navigation === NavigationState.DUTIES) return <DutiesPage />;\n    if (navigation === NavigationState.REVIEW) return <ReviewPage />;\n\n    return <CalendarPage />;\n};\n","import { Store, NavigationState } from '../store';\nimport { Persistore } from 'persistore';\n\nconst NAV_KEY = 'navigation';\n\nconst _set = (navigation: NavigationState): void => {\n    Persistore.set(NAV_KEY, navigation);\n    Store.set({ navigation });\n};\n\nconst navigateTo = (navigation: NavigationState) => () => _set(navigation);\n\nconst _get = (): NavigationState => {\n    const current = Persistore.get(NAV_KEY);\n    if (current === NavigationState.DUTIES) return NavigationState.DUTIES;\n    if (current === NavigationState.REVIEW) return NavigationState.REVIEW;\n    return NavigationState.CALENDAR;\n};\n\nStore.set({ navigation: _get() });\n\nexport const NavigationStore = { navigateTo };\n","import React, { useMemo } from 'react';\nimport { NavigationState, useSub } from '../store';\nimport { NavigationStore } from '../util/navigation-store';\n\ntype NavigationButton = { type: NavigationState; label: string };\nconst NavigationButtons: ReadonlyArray<NavigationButton> = [\n    { type: NavigationState.CALENDAR, label: 'Termine' },\n    { type: NavigationState.DUTIES, label: 'Ämter' },\n    { type: NavigationState.REVIEW, label: 'Kronen' },\n];\n\nexport const Header = () => {\n    const { navigation } = useSub(({ navigation }) => ({ navigation }));\n\n    const buttons = useMemo(\n        () =>\n            NavigationButtons.filter(button => button.type !== navigation).map(btn => (\n                <button onClick={NavigationStore.navigateTo(btn.type)} key={btn.type}>\n                    {btn.label}\n                </button>\n            )),\n        [navigation]\n    );\n    return (\n        <header className=\"App-header\">\n            <img src=\"/nb-logo.svg\" className=\"App-logo\" alt=\"logo\" />\n            <div className=\"navigation\">{buttons}</div>\n        </header>\n    );\n};\n","export const Globals = {\n    window: () => window,\n    document: () => document,\n    navigator: (): any => navigator,\n    onLine: (): boolean => !('onLine' in Globals.navigator()) || Globals.navigator().onLine,\n    timestamp: () => Date.now(),\n};\n","import React, { ReactNode, useCallback, useEffect, useState } from 'react';\nimport { Globals } from './globals';\nimport { IconUndo } from './components/icons/icon';\n\nconst reloadPage = () => {\n    Globals.window().open(window.location.href, '_self');\n};\n\nlet newSWInstalledCb = () => {};\n\nconst registerServiceWorker = () =>\n    Globals.navigator()\n        .serviceWorker.register('/sw.js')\n        .then((reg: any /* ServiceWorkerRegistration */) => {\n            reg.onupdatefound = () => {\n                // reg.installing -> the installing worker, or undefined\n                // reg.waiting -> the waiting worker, or undefined\n                // reg.active -> the active worker, or undefined\n                const installingWorker = reg.installing;\n                const activeWorker = reg.active;\n                installingWorker.onstatechange = () => {\n                    // \"installing\" - the install event has fired, but not yet complete\n                    // \"installed\"  - install complete\n                    // \"activating\" - the activate event has fired, but not yet complete\n                    // \"activated\"  - fully active\n                    // \"redundant\"  - discarded. Either failed install, or it's been\n                    //                replaced by a newer version\n                    if (installingWorker.state === 'installed' && activeWorker) newSWInstalledCb();\n                };\n            };\n        })\n        .catch(() => Globals.window().console.error('service worker registration failed'));\n\nconst initServiceWorker = () => {\n    if (process.env.NODE_ENV !== 'development') {\n        'serviceWorker' in navigator && window.addEventListener('load', registerServiceWorker);\n    }\n};\n\nconst doAfter = (ms: number, cb: () => void): Promise<void> =>\n    new Promise(resolve =>\n        Globals.window().setTimeout(() => {\n            cb();\n            resolve();\n        }, ms)\n    );\n\nexport const ServiceWorkerUpdater = () => {\n    const [content, setContent] = useState<ReactNode | void>();\n\n    const contentDelayed = useCallback(\n        (delay: number, content: ReactNode): Promise<void> => doAfter(delay, () => setContent(content)),\n        []\n    );\n\n    const initRefresh = useCallback(\n        () =>\n            Promise.all([\n                contentDelayed(0, 'Update gefunden'),\n                contentDelayed(1000, 'Update anwenden'),\n                contentDelayed(1300, 'Update anwenden.'),\n                contentDelayed(1600, 'Update anwenden..'),\n                contentDelayed(1900, 'Update anwenden...'),\n                contentDelayed(2200, <IconUndo />),\n                doAfter(2500, reloadPage),\n            ]),\n        [] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n\n    useEffect(() => {\n        newSWInstalledCb = initRefresh;\n        initServiceWorker();\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    if (!content) return null;\n\n    return (\n        <div className=\"sw-update\">\n            <div className=\"sw-update-overlay\" />\n            <div className=\"sw-update-content\">{content}</div>\n        </div>\n    );\n};\n","import { Store, CalendarEvent } from '../store';\n\nexport const parseDate = (value?: any): Date | void => {\n    if (value) {\n        const matchWithTime = value.match(/^([0-9]{2})\\.([0-9]{2})\\.([0-9]{4}) ([0-9]{1,2}):([0-9]{2})$/);\n        const matchWithoutTime = value.match(/^([0-9]{2})\\.([0-9]{2})\\.([0-9]{4})$/);\n\n        if (!matchWithTime && !matchWithoutTime) return;\n\n        const usedMatch = matchWithTime ? matchWithTime : [...matchWithoutTime, 0, 0];\n\n        // extract information\n        const year = Number(usedMatch[3]);\n        const month = Number(usedMatch[2]) - 1;\n        const day = Number(usedMatch[1]);\n        const hour = Number(usedMatch[4]);\n        const minute = Number(usedMatch[5]);\n        // parse it\n        const parsed = new Date(Date.UTC(year, month, day, hour, minute));\n        const dateIsValid = year === parsed.getFullYear() && month === parsed.getMonth();\n\n        if (!dateIsValid) return;\n\n        return parsed; // return valid date\n    }\n};\n\ntype CalendarEventFromJson = { title: string; start: string; end?: string; desc?: string; color?: string };\n\nconst parseEvent = ({ title, start, end, desc, color }: CalendarEventFromJson): CalendarEvent | void => {\n    const startDate = parseDate(start);\n    const endDate = end ? parseDate(end) : startDate;\n    return startDate && endDate ? { title, start: startDate, end: endDate, desc, color } : undefined;\n};\n\nexport const loadCalendarEvents = () =>\n    fetch('/events.json', { headers: { 'cache-control': 'no-cache', pragma: 'no-cache' } })\n        .then(r => r.json())\n        .then(({ events }) => {\n            const parsedEvents = events.map(parseEvent).filter(Boolean);\n            Store.set({ events: parsedEvents });\n        })\n        // eslint-disable-next-line no-console\n        .catch(console.error);\n","import './assets/main.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { Globals } from './globals';\nimport { ServiceWorkerUpdater } from './sw-logic';\nimport { loadCalendarEvents } from './util/load-calendar-events';\nimport { loadReviews } from './util/load-reviews';\n\nconst root = Globals.document().getElementById('root');\nReactDOM.render(\n    <>\n        <App />\n        <ServiceWorkerUpdater />\n    </>,\n    root\n);\n\nloadCalendarEvents();\nloadReviews();\n","import React from 'react';\nimport { Content } from './components/Content';\nimport { Header } from './components/Header';\n\nexport const App = () => (\n    <div className=\"App\">\n        <Header />\n        <div className=\"App-content\">\n            <Content />\n        </div>\n    </div>\n);\n","import { Store } from '../store';\n\nexport const loadReviews = () =>\n    fetch('/reviews.json', { headers: { 'cache-control': 'no-cache', pragma: 'no-cache' } })\n        .then(r => r.json())\n        .then(({ reviews, version, since }) => {\n            const parsedVersion = version || 'konnte nicht geladen werden';\n            const parsedSince = since || 'konnte nicht geladen werden';\n            Store.set({ reviewsData: { version: parsedVersion, reviews, since: parsedSince } });\n        })\n        .catch(() => {});\n"],"sourceRoot":""}